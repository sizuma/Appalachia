%{
#include "defs.h"
#define YYSTYPE void*
%}
%token	ID NUMBER STRING LPAR RPAR LBRA RBRA LARROW RALLOW COMMA DOT THIS EQUAL LAMBDA
%%

Program
	: Statements
    { program($1); }
Statements
	: Expression
    { $$ = statements1($1); }
	| Statements Expression
    { $$ = statements2($1, $2); }

Block
    : LBRA BlockBody RBRA
    { $$ = block($2); }

BlockBody
    : Expression
    { $$ = blockBody1($1); }
    | BlockBody Expression
    { $$ = blockBody2($1, $2); }

Expression
	: Call
    { $$ = expressionCall($1); }
	| Value
    { $$ = expressionValue($1); }

Expressions
	: Expression
    { $$ = expressions1($1); }
	| Expressions COMMA Expression
    { $$ = expressions2($1, $3); }

Call
	: Expression LPAR Expressions RPAR
    { $$ = callWithArgs($1, $3); }
	| Expression LPAR RPAR
    { $$ = callWithoutArgs($1); }
    | Assign
    { $$ = callAssign($1); }

Assign
    : Ref EQUAL Expression 
    { $$ = assign($1, $3); }

Value
    : Constant
    { $$ = valueConstant($1); }
    | Lambda
    { $$ = valueLambda($1); }
    | Block
    { $$ = valueBlock($1); }
    | Ref
    { $$ = valueRef($1); }

Lambda
    : LAMBDA Expressions RALLOW Block
    { $$ = lambdaWithArgs($2, $4); }
    | LAMBDA RALLOW Block
    { $$ = lambdaWithoutArgs($3); }

Ref
    : ID
    { $$ = ref(yytext); }
    | Expression DOT ID
    { $$ = nestedRef($1, yytext); }

Constant
	: NUMBER
    { $$ = number(yytext); }
	| STRING
    { $$ = string(yytext); }
	| THIS
    { $$ = this(yytext); }
%%

#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
