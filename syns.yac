%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token	ID CALL ELSE NUMBER STRING EQUAL LPAR RPAR LBRA RBRA LARROW RALLOW COMMA DOT
%%

Program
	: Statements
Statements
	: Statement		{ $$ = $1;  tree($$); }
	| Statements Statement 	{ $$ = $2; tree($$); }
Statement
	: Assign
	| Expression

Assign
	: Variable EQUAL Expression { $$ = node("=", cons($1, $3)); }

Block
    : LBRA BlockBody RBRA { $$ = node("block", $2); }
BlockBody
    : Statement
    | BlockBody Statement   { $$ = cons($1, $2); }
Expression
	: Call
	| Variable
	| Constant
	| Lambda
	| Block
Expressions
	: Expression
	| Expressions COMMA Expression	{ $$ = node(",", cons($1, $3)); }

Call
	: Variable LPAR Expressions RPAR { $$ = node("call", cons($1, $3)); }
	| Variable LPAR RPAR { $$ = node("call", cons($1, nop())); }

Lambda
    : LPAR Expressions RPAR RALLOW Block    { $$ = node("lambda", cons($2, $5)); }
    | LPAR RPAR RALLOW Block    { $$ = node("lambda", cons(nop(), $4)); }
Variable
	: ID				{ $$ = leaf("ID", yytext); }
Constant
	: NUMBER			{ $$ = leaf("NUMBER", yytext); }
	| STRING			{ $$ = leaf("STRING", yytext); }
%%

#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
