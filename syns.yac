%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token	ID NUMBER STRING LPAR RPAR LBRA RBRA LARROW RALLOW COMMA DOT THIS EQUAL
%%

Program
	: Statements
Statements
	: Statement		{ $$ = $1;  tree($$); }
	| Statements Statement 	{ $$ = $2; tree($$); }
Statement
    : Assign
	| Expression

Block
    : LBRA RBRA { $$ = node("block", nop()); }
    | LBRA BlockBody RBRA { $$ = node("block", $2); }
BlockBody
    : Statement
    | BlockBody Statement   { $$ = cons($1, $2); }
Expression
	: Call
	| Constant
	| Lambda
	| Block
	| Ref
Expressions
	: Expression
	| Expressions COMMA Expression	{ $$ = cons($1, $3); }

Call
	: Expression LPAR Expressions RPAR { $$ = node("call", cons($1, $3)); }
	| Expression LPAR RPAR { $$ = node("call", cons($1, nop())); }

Assign
    : Ref EQUAL Expression {
        char* name = shortenRef($1);
        $$ = node(
            "call",
            cons(
                leaf("ID", "assign"),
                cons(
                    cons(
                        $1,
                        leaf("STRING", name)
                    ),
                    $3
                )
            )
        );

    }

Lambda
    : LPAR Expressions RPAR RALLOW Block    { $$ = node("lambda", cons($2, $5)); }
    | LPAR RPAR RALLOW Block    { $$ = node("lambda", cons(nop(), $4)); }

Ref
    : ID    { $$ = leaf("ID", yytext); }
    | Expression DOT Ref { $$ = node("ref", cons($1, $3)); }
Constant
	: NUMBER			{ $$ = leaf("NUMBER", yytext); }
	| STRING			{ $$ = leaf("STRING", yytext); }
	| THIS              { $$ = leaf("BLOCK", ""); }
%%

#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
