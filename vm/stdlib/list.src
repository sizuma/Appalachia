List = {
	Cons = \ car, cdr -> {
		this
	}
	range = \ from, to, inc -> {
		self = this
		inc = orDefault(inc, 1)
		list = List.empty()
		index = from
		each = \ -> {
			self.list = self.list.append(index)
			self.index = +(self.index, inc)
		}
		while = \ -> {
			<(index, to)
		}
		for(each, while)
		list
	}
	new = \ headCons -> {
		self = this
		append = \ e -> {
			List.append(self, e)
		}
		foreach = \ f -> {
			List.foreach(self, f)
		}
		map = \ f -> {
			List.map(self, f)
		}
		filter = \ f -> {
			List.filter(self, f)
		}
		head = \ -> {
			List.head(self)
		}
		tail = \ -> {
			List.tail(self)
		}
		get = \ index -> {
			List.get(self, index)
		}
		this
	}
	empty = \ -> {
		List.new(null)
	}
	append = \ list, e -> {
		self = this
		head = null
		tail = head
		list.foreach(\ each -> {
			cons = List.Cons(each, null)
			if(==(head, null), \ -> {
				self.head = cons
			}, \ -> {
				self.tail.cdr = cons
			})
			self.tail = cons
		})
		cons = List.Cons(e, null)
		if(==(tail, null), \ -> {
			List.new(cons)
		}, \ -> {
			self.tail.cdr = cons
			List.new(head)
		})
	}
	foreach = \ list, lambda -> {
		f = \ current -> {
			lambda(current.car)
			cdr = current.cdr
			if(!=(cdr, null), \ -> {
				f(cdr)
			})
		}
		head = list.headCons
		if(!=(head, null), \ -> {
			f(head)
		})
	}
	map = \ list, lambda -> {
		self = this
		newList = List.empty()
		list.foreach(\ each -> {
			self.newList = self.newList.append(lambda(each))
		})
		newList
	}
	filter = \ list, lambda -> {
		self = this
		newList = List.empty()
		list.foreach(\ each -> {
			if(lambda(each), \ -> {
				self.newList = self.newList.append(each)
			})
		})
		newList
	}
	head = \ list -> {
		list.headCons.car
	}
	tail = \ list -> {
		List.new(list.headCons.cdr)
	}
	get = \ list, index -> {
		if(==(index, 0), \ -> {
			List.head(list)
		}, \ -> {
			List.get(List.tail(list), -(index, 1))
		})
	}
	this
}
