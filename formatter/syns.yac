%{
#include "defs.h"
#define YYSTYPE char*

%}
%token	ID NUMBER STRING LPAR RPAR LBRA RBRA LARROW RALLOW COMMA DOT THIS EQUAL LAMBDA
%%

Program
	: Statements
    { copy($1); indent(); printf("%s\n", clone());  }
Statements
	: Expression
    { copy($1); $$ = clone(); }
	| Statements Expression
    { copy($1); append("\n"); append($2); $$ = clone(); }

Block
    : LBRA BlockBody RBRA
    { copy("{\n"); append($2); append("\n}"); $$ = clone(); }

BlockBody
    : Expression
    { copy($1); $$ = clone(); }
    | BlockBody Expression
    { copy($1); newLine(); append($2); $$ = clone(); }

Expression
	: Call
    { copy($1); $$ = clone(); }
	| Value
    { copy($1); $$ = clone(); }

Expressions
	: Expression
    { copy($1); $$ = clone(); }
	| Expressions COMMA Expression
    { copy($1); append(", "); append($3); $$ = clone(); }

Call
	: Expression LPAR Expressions RPAR
    { copy($1); append("("); append($3); append(")"); $$ = clone(); }
	| Expression LPAR RPAR
    { copy($1); append("("); append(")"); $$ = clone(); }
    | Assign
    { copy($1); $$ = clone(); }

Assign
    : Ref EQUAL Expression 
    { copy($1); append(" = "); append($3); $$ = clone(); }

Value
    : Constant
    { copy($1); $$ = clone(); }
    | Lambda
    { copy($1); $$ = clone(); }
    | Block
    { copy($1); $$ = clone(); }
    | Ref
    { copy($1); $$ = clone(); }

Lambda
    : LAMBDA Expressions RALLOW Block
    { copy("\\ "); append($2); append(" -> "); append($4); $$ = clone(); }
    | LAMBDA RALLOW Block
    { copy("\\ "); append("-> "); append($3); $$ = clone(); }

Ref
    : ID
    { copy(yytext); $$ = clone(); }
    | Expression DOT ID
    { copy($1); append("."); append(yytext); $$ = clone(); }

Constant
	: NUMBER
    { copy(yytext); $$ = clone(); }
	| STRING
    { copy(yytext); $$ = clone(); }
	| THIS
    { copy(yytext); $$ = clone(); }
%%

#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "\n%s at %d: nearby \"%s\"\n\n", s, linecounter, yytext);
	exit(EXIT_FAILURE);
}
